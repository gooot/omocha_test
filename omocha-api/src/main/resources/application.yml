server:
  shutdown: graceful

spring:
  lifecycle:
    timeout-per-shutdown-phase: 10s
  application:
    name: omocha
  profiles:
    active: dev # 개발 환경에 따라 변경할 것 (local | dev | prod)
  output:
    ansi:
      enabled: always
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect_uri: ${SERVER_DOMAIN}/api/v2/login/oauth2/code/google
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect_uri: ${SERVER_DOMAIN}/api/v2/login/oauth2/code/naver
            client-name: Naver
            authorization-grant-type: authorization_code
            scope:
              - email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: validate
    open-in-view: false
  sql:
    init:
      mode: never
  flyway:
    enabled: true
    baseline-on-migrate: true
    out-of-order: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB
      enabled: true
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${OMOCHA_EMAIL}
    password: ${OMOCHA_EMAIL_PASSWORD}
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          timeout: 5000
          connection-timeout: 5000
          write-timeout: 5000
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

url:
  server-domain: ${SERVER_DOMAIN}
  client-domain: ${CLIENT_DOMAIN}
  oauth-callback: ${OAUTH_CALLBACK}

logging:
  file:
    path: ${LOG_PATH}

jwt:
  access_secret: ${JWT_ACCESS_SECRET}
  refresh_secret: ${JWT_REFRESH_SECRET}

cloud:
  aws:
    stack:
      auto: false
    region:
      static: ${AWS_REGION_NAME}
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    s3:
      bucket: ${S3_BUCKET_NAME}
      upload-path: ${S3_IMAGE_PATH}
---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:postgresql://${LOCAL_DATABASE_HOSTNAME}:${LOCAL_DATABASE_PORT}/${LOCAL_DATABASE_NAME}
    username: ${LOCAL_DATABASE_USERNAME}
    password: ${LOCAL_DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: ${DEV_AWS_DATASOURCE_URL}
    username: ${DEV_AWS_DATABASE_USERNAME}
    password: ${DEV_AWS_DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${PROD_AWS_DATASOURCE_URL}
    username: ${PROD_AWS_DATABASE_USERNAME}
    password: ${PROD_AWS_DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver

springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false